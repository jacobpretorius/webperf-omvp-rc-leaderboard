@{
    if (this.CurrentRecord == null)
    {
        return;
    }
}

<h3 class="@(this.CurrentRecord.Key.FormFactor == "PHONE" ? "mt-8" : "mt-4") mb-1 font-extrabold tracking-tight">
    @this.CurrentRecord.Key.FormFactor CrUX URL report @(this.CurrentRecord.CollectionPeriod.FirstDate.Year)-@(this.CurrentRecord.CollectionPeriod.FirstDate.Month)-@(this.CurrentRecord.CollectionPeriod.FirstDate.Day) &mdash; @(this.CurrentRecord.CollectionPeriod.LastDate.Year)-@(this.CurrentRecord.CollectionPeriod.LastDate.Month)-@(this.CurrentRecord.CollectionPeriod.LastDate.Day)
</h3>

<div class="text-sm flex flex-row flex-wrap">
    <CruxCategory Heading="Largest Contentful Paint (LCP)">
        <P75>
            @GetAsMsOrSecs(this.CurrentRecord.Metrics.LargestContentfulPaint.Percentiles.P75)
        </P75>
        <Histogram>
            @{
                var counter = 0;
            }
            @foreach (var item in this.CurrentRecord.Metrics.LargestContentfulPaint.Histogram)
            {
                <div class="@GetGroupClassName(counter) h-[8px]" style="flex-grow: @item.Density;"></div>
                counter++;
            }
        </Histogram>
    </CruxCategory>
    <CruxCategory Heading="First Input Delay (FID)">
        <P75>
            @GetAsMsOrSecs(this.CurrentRecord.Metrics.FirstInputDelay.Percentiles.P75)
        </P75>
        <Histogram>
            @{
                var counter = 0;
            }
            @foreach (var item in this.CurrentRecord.Metrics.FirstInputDelay.Histogram)
            {
                <div class="@GetGroupClassName(counter) h-[8px]" style="flex-grow: @item.Density;"></div>
                counter++;
            }
        </Histogram>
    </CruxCategory>
    <CruxCategory Heading="Cumulative Layout Shift (CLS)">
        <P75>
            @this.CurrentRecord.Metrics.CumulativeLayoutShift.Percentiles.P75
        </P75>
        <Histogram>
            @{
                var counter = 0;
            }
            @foreach (var item in this.CurrentRecord.Metrics.CumulativeLayoutShift.Histogram)
            {
                <div class="@GetGroupClassName(counter) h-[8px]" style="flex-grow: @item.Density;"></div>
                counter++;
            }
        </Histogram>
    </CruxCategory>
    <CruxCategory Heading="First Contentful Paint (FCP)">
        <P75>
            @GetAsMsOrSecs(this.CurrentRecord.Metrics.FirstContentfulPaint.Percentiles.P75)
        </P75>
        <Histogram>
            @{
                var counter = 0;
            }
            @foreach (var item in this.CurrentRecord.Metrics.FirstContentfulPaint.Histogram)
            {
                <div class="@GetGroupClassName(counter) h-[8px]" style="flex-grow: @item.Density;"></div>
                counter++;
            }
        </Histogram>
    </CruxCategory>
    <CruxCategory Heading="Interaction to Next Paint (INP)">
        <P75>
            @GetAsMsOrSecs(this.CurrentRecord.Metrics.InteractionToNextPaint.Percentiles.P75)
        </P75>
        <Histogram>
            @{
                var counter = 0;
            }
            @foreach (var item in this.CurrentRecord.Metrics.InteractionToNextPaint.Histogram)
            {
                <div class="@GetGroupClassName(counter) h-[8px]" style="flex-grow: @item.Density;"></div>
                counter++;
            }
        </Histogram>
    </CruxCategory>
    <CruxCategory Heading="Time to First Byte (TTFB)">
        <P75>
            @GetAsMsOrSecs(this.CurrentRecord.Metrics.ExperimentalTimeToFirstByte.Percentiles.P75)
        </P75>
        <Histogram>
            @{
                var counter = 0;
            }
            @foreach (var item in this.CurrentRecord.Metrics.ExperimentalTimeToFirstByte.Histogram)
            {
                <div class="@GetGroupClassName(counter) h-[8px]" style="flex-grow: @item.Density;"></div>
                counter++;
            }
        </Histogram>
    </CruxCategory>
</div>

@code {
    [Parameter]
    public Record? CurrentRecord { get; set; }

    private static string GetAsMsOrSecs(int value)
    {
        if (value < 1000)
        {
            return $"{value} ms";
        }

        return $"{Math.Round(Convert.ToDouble(value / 1000d), 2)} s";
    }

    private static string GetGroupClassName(int group)
    {
        var ratingClass = "bg-green-300";

        if (group == 1)
        {
            ratingClass = "bg-red-400";
        }
        else if (group == 2)
        {
            ratingClass = "bg-orange-300";
        }

        return ratingClass;
    }
}
