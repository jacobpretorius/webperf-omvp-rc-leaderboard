@using System.Text.Json
@using Krompaco.RecordCollector.Web.Extensions
@using Krompaco.RecordCollector.Web.Views.Shared
@using System.Globalization
@inject IConfiguration Configuration

@{
    var path = this.Configuration.GetValue<string>("AppSettings:WebperfJsonDataRootPath");
    var sitesPath = this.Configuration.GetValue<string>("AppSettings:WebperfSitesJsonFilePath");

    if (!File.Exists(sitesPath))
    {
        return;
    }

    var exists = Directory.Exists(path);

    if (!exists)
    {
        return;
    }

    var di = new DirectoryInfo(path);

    var list = di.EnumerateFiles("*.json")
        .OrderBy(x => x.Name)
        .ToList();

    if (!list.Any())
    {
        return;
    }

    var last = list.Last().Name;
    var filterBy = list.Last().Name[..(last.Length > 7 ? 8 : last.Length)];

    list = list.Where(x => x.Name.StartsWith(filterBy)).ToList();

    var results = list.Select(x =>
        JsonSerializer.Deserialize<BoardBlock.TestRoot>(File.ReadAllText(x.FullName))
        ?? new BoardBlock.TestRoot()).ToList();

    var siteRoot = JsonSerializer.Deserialize<BoardBlock.SiteRoot>(await File.ReadAllTextAsync(sitesPath)) ?? new BoardBlock.SiteRoot();

    var flatResults = results.SelectMany(x => x.Tests).OrderBy(x => x.SiteId).ThenBy(x => x.TypeOfTest).ToList();

    // Generate files
    BoardBlock.CreateSitePages(siteRoot.Sites, flatResults, this.Configuration.GetAppSettingsContentRootPath());

    var position = 0;
}

@foreach (var site in siteRoot.Sites.OrderByDescending(x => BoardBlock.GetAverage(x.Id, siteRoot.Sites, flatResults)))
{
	var siteResults = flatResults.Where(x => x.SiteId == site.Id).ToList();

	if (!siteResults.Any())
	{
        continue;
	}

	position++;

	<h2 class="mt-6 pt-6 border-t border-gray-800 text-xl tracking-tight font-bold md:text-2xl flex items-center flex-wrap gap-3">
		<span>
			@(position).
		</span>

		<a class="link-primary outline-primary" href="/sites/@BoardBlock.GetFileName(site).Replace(".html", "/")">
			@Html.Raw(BoardBlock.GetSiteNameHtml(site.Url))
		</a>

        <span class="@Program.GetRatingClassName(siteResults.Average(x => x.Rating).ToString("0.00", new CultureInfo("en-US"))) px-2 py-1 rounded-md">
			@siteResults.Average(x => x.Rating).ToString("0.00", new CultureInfo("en-US"))
		</span>
	</h2>

	<ul class="flex items-center flex-wrap gap-3 mt-1">
        @foreach (var result in siteResults)
        {
            <li class="@Program.GetRatingClassName(result.Rating.ToString("0.00", new CultureInfo("en-US"))) px-2 py-1 rounded-md mt-3">
		        <span class="font-extrabold">
			        @BoardBlock.GetTypeOfTest(result.TypeOfTest)
		        </span>
		        <span>
			        @result.Rating.ToString("0.00", new CultureInfo("en-US"))
		        </span>
	        </li>
        }
	</ul>
}
